Os Design Patterns criacionais (padrões de projeto criacionais) são focados na
criação de objetos, fornecendo soluções para controlar o processo de
instânciação de objetos em sistemas de software. Em vez de criar objetos
diretamente usando o operador new, esses padrões propõem técnicas para abstrair
e gerenciar a criação de objetos, visando aumentar a flexibilidade e a
reutilização.

Aqui estão os principais padrões de design criacionais:

1. Factory Method (Método Fábrica)

  • Objetivo: Define uma interface para criar um objeto, mas permite que as
  subclasses decidam qual classe instanciar. O Factory Method adia para as
  subclasses a decisão sobre qual objeto concreto criar. • Exemplo: Em uma
  aplicação de entrega, dependendo do tipo de veículo (carro, moto, bicicleta),
  um método fábrica decide qual objeto correspondente será instanciado. • Uso
  comum: Quando as classes não podem antecipar quais objetos devem ser criados
  ou quando a criação de objetos precisa ser delegada a subclasses.

2. Abstract Factory (Fábrica Abstrata)

  • Objetivo: Fornece uma interface para criar famílias de objetos relacionados
  ou dependentes sem especificar suas classes concretas. Ele cria fábricas que,
  por sua vez, criam os objetos. • Exemplo: Um sistema de interface gráfica
  que deve suportar múltiplos temas (Windows, macOS, Linux), onde cada tema tem
  um conjunto de widgets (botões, caixas de seleção) específicos. • Uso comum:
  Quando você precisa criar grupos ou famílias de objetos relacionados, e
  deseja garantir que os objetos sejam compatíveis uns com os outros.

3. Builder (Construtor)

  • Objetivo: Separa a construção de um objeto complexo da sua representação,
  permitindo que o mesmo processo de construção crie diferentes representações.
  • Exemplo: Construção de diferentes tipos de casas (simples, luxuosa) ou
  carros (básico, esportivo) onde os mesmos passos (construir fundação,
  levantar paredes) são usados, mas os detalhes variam. • Uso comum: Quando a
  criação de um objeto envolve muitos passos e você deseja controlar ou
  personalizar o processo de construção de forma mais detalhada.

4. Prototype (Protótipo)

  • Objetivo: Cria novos objetos copiando um protótipo existente, em vez de
  criar uma nova instância do zero. Esse padrão permite criar novos objetos de
  maneira eficiente ao reutilizar um objeto inicial como base. • Exemplo: Em
  um editor de gráficos, ao duplicar um elemento gráfico (como um círculo ou
  quadrado), o Prototype permite copiar o objeto existente para criar um novo.
  • Uso comum: Quando a criação de um objeto é custosa ou complexa, e a
  clonagem pode oferecer um desempenho melhor ao reutilizar um objeto existente
  como ponto de partida.

5. Singleton (Singleton)

  • Objetivo: Garante que uma classe tenha apenas uma única instância e fornece
  um ponto global de acesso a essa instância. Isso evita a criação de várias
  instâncias desnecessárias de uma mesma classe. • Exemplo: Um sistema de log
  que deve garantir que apenas um único objeto de log exista durante a execução
  da aplicação, para centralizar a gravação de mensagens. • Uso comum: Quando
  você deseja ter exatamente uma instância de uma classe em todo o ciclo de
  vida da aplicação, como em gerenciamento de conexões de banco de dados,
  cache, ou classes de configuração.

Vantagens dos Padrões Criacionais:

  • Flexibilidade na criação de objetos: Eles ajudam a abstrair a lógica de
  criação de objetos, permitindo maior flexibilidade no que se refere à maneira
  como as instâncias são criadas e gerenciadas. • Desacoplamento: Reduzem o
  acoplamento entre o código que cria os objetos e as classes concretas,
  permitindo que você mude facilmente a classe de um objeto sem precisar
  alterar o código em várias partes do sistema. • Reutilização de código:
  Facilitam a reutilização de padrões de criação de objetos, especialmente em
  situações onde os objetos têm construções complexas ou variáveis.

Comparação entre os Padrões Criacionais:

  • Factory Method vs Abstract Factory: Ambos envolvem a criação de objetos,
  mas o Factory Method lida com a criação de um único produto, enquanto a
  Abstract Factory cria uma família de produtos relacionados. O Factory Method
  é frequentemente usado para permitir que subclasses decidam qual classe de
  produto instanciar, enquanto a Abstract Factory é mais apropriada quando se
  trata de criar produtos compatíveis entre si. • Builder vs Prototype: O
  Builder é usado para construir objetos complexos passo a passo, e o foco é na
  flexibilidade de montagem, enquanto o Prototype é usado para criar novos
  objetos clonando um protótipo existente, o foco é na eficiência de criação. •
  Singleton vs Outros Padrões Criacionais: O Singleton é específico para
  garantir que apenas uma instância de uma classe exista, enquanto os outros
  padrões (como Factory Method e Builder) se concentram em como criar várias
  instâncias, controlando o processo de criação.

Cenários de Uso:

  • Factory Method: Quando você precisa criar objetos, mas as classes concretas
  não são conhecidas até o momento da execução. • Abstract Factory: Quando você
  precisa criar famílias de objetos ou quando a criação de objetos precisa ser
  organizada em temas ou grupos. • Builder: Quando o processo de criação de
  objetos é complexo, com várias etapas e variações. • Prototype: Quando a
  criação de novos objetos a partir do zero é custosa ou quando deseja-se
  evitar o uso do operador new diretamente. • Singleton: Quando é necessário
  garantir que uma única instância de uma classe exista e seja acessível de
  qualquer parte da aplicação.

Esses padrões criacionais ajudam a lidar com a complexidade associada à criação
de objetos em sistemas, permitindo maior controle sobre como, quando e onde os
objetos são instanciados. Eles também ajudam a garantir que o código seja mais
flexível e fácil de manter, ao isolar as responsabilidades de criação de
objetos.
