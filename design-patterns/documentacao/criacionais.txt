Os padrões de design criacionais estão relacionados ao processo de codificação
em si. Todos eles têm a ver com features, ou seja, a criação de recursos novos
no sistema, de modo que estes precisam ser inseridos em momentos de adição de
novas entidades de software.

São considerados os mais simples, pois têm como objetivo principal gerar a
solução de problemas que podem ainda não existir, ou seja, são frequentemente
vistos como recursos preventivos.

Dentre os padrões criacionais temos:

  - Factory
  - Abstract factory
  - Factory method
  - Builder
  - Prototype
  - Singleton
  - Monostate

Abaixo uma definição sobre cada um destes padrões

FACTORY

Dentre as fábricas, este é o considerado mais simples de entender. Quando temos
em questão uma factory, basicamente temos uma classe que irá retornar um objeto
(ou outra classe em alguns casos) que seja especializado em uma tarefa concisa
com o pedido.

Geralmente uma factory implementa o método create e passa um parâmetro. Este
parâmetro será julgado em uma estrutura como o switch (ou uma sequência de
condicionais, ou um dicionário...) e isto irá retornar um objeto que esteja
relacionado ao parâmetro passado em create.

FACTORY METHOD

As factory methods são derivações das factories, mas a diferença aqui é que
basicamente as classes filhas de uma interface que descreve a factory são
especialistas em gerar determinado tipo de objeto. Isso acaba sendo bastante
vantajoso quando se pretende ter fábricas que gerem objetos específicos para
comportamentos específicos.

As vantagens que existem em ter factory methods é que a criação singular de
objetos de determinada classe poderá ter apoio de outros métodos internos da
classe, de modo que estes possam trazer alguma vantagem à criação de determinado
objeto somando a ele a execução de alguma lógica em particular.

ABSTRACT FACTORY

As abstract factories possuem um comportamento parecido com as method factories,
contudo o objetivo nas abstracts é que a factory seja capaz de gerar famílias
inteiras de objetos relacionados.

O comum é que estas factories se especializem em determinado grupo de objetos e
possam gerar (por meio de creates individuais), os objetos a qual se destinam.

BUILDER

O padrão builder existe para permitir que objetos complexos sejam constituídos
por meio de camadas separadas e que possam realizar o build das partes
individuais de maneira isolada.

Isto permite que tarefas complexas possam ser, em tempo de código, quebradas em
partes menores e estas partes menores executem bem uma determinada tarefa
específica.

PROTOTYPE

O padrão prototype serve para que quando você precise operar determinados
objetos, o faça por meio de clones de objetos criados impedindo que o processo
cause alguma inconsistência. Outro motivo para se usar prototype seria, por
exemplo, para registrar estados temporais de determinados objetos, permitindo
assim que você possa reaproveitar estados temporais dos objetos.

Isto é particularmente para informações individuais e possibilidade de se
realizar setups de dados baseado em objetos em locais estratégicos como o
localStorage, por exemplo ou em um banco de dados orientado a documentos, caso
você deseja fixar o estado deste objeto.

SINGLETON

O padrão singleton é usado quando você precisa que uma determinada instância de
uma classe não ocorra mais de uma vez! Garantindo assim que realmente haja
somente um ponto de acesso àquele recurso.

O padrão singleton tem um rival que alguns consideram mais moderno. Trata-se do
padrão singleton monostate (ou somente monostate.

MONOSTATE

O padrão monostate é uma variação do singleton. Mas a diferença estratégica aqui
é que, para alguns, uma classe não deveria impedir que mais de uma instãncia
fosse iniciada, pois isto fere um dos recursos mais importantes na POO, que é o
de instânciar novos objetos com base em uma classe.

Para resolver este problema, foi sugerido um padrão levemente alterado do
singleton, mas que não impede novos objetos de serem criados, desde que haja um
estado compartilhado entre eles e que esse estado seja o objeto comum a qualquer
instância da classe, permitindo assim que, por mais que tenhamos várias
instâncias do objeto, apenas um ponto de estado central seria permitido entre
eles, tomando o lugar comportamental do singleton.

Com isso nós finalizamos os padrões criacionais.
